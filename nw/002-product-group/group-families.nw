% -*- mode: poly-noweb; noweb-code-mode: mizar-mode; -*-

\section{Indexed Families of Groups}

We have indexed families of groups, which are little more than indexed
families of magmas which satisfy a few nice properties. We do not need
to redefine anything, but we need to introduce a notion of a relation
being [[Group-yielding]] (i.e., every element of its range is a group).
Then we just need to register the fact that
$\mathcal{F}_{i}$ is an associative group-like magma. This will be
folded into the definition of a [[Group]] in Mizar. We can use this to
define a [[Group-Family of I]] as just a [[Group-yielding ManySortedSet of I]].
This \emph{should have been} the approach taken in \mml{group19}, but wasn't.

<<Indexed Families of Groups>>=
begin :: Preliminary Work about Group-Families and Group-Yielding Many Sorted Sets
<<Definition: Group-yielding>>

<<Register: Group-yielding implies magma-yielding and 1-sorted-yielding>>

<<Theorem: associative Group-like magma-Families are Group-yielding>>

<<Register: Group-yielding for Many-sorted set of $I$>>

<<Register: Group-yielding for Function>>

<<Theorem: $\mathcal{F}$ is group-yielding family indexed by $I$ and $i\in I$, then $\mathcal{F}_{i}$ is a group>>

<<Register: F.i is a Group>>

<<Register: ``associative Group-like'' implies ``Group-yielding'' for magma-families>>

<<Theorem: Sanity check that $[i,\mathcal{F}_{i}]\in\mathcal{F}$>>

<<Register: Group-yielding implies Group-like associative for Magma Family>>

<<Register: Group-Family is Group-yielding>>

<<Definition: Group-Family>>

<<Reservations of group families>>

<<Theorem: empty family of groups>>

<<Theorem: $\mathcal{F}_{i}=G$ is a group-family>>

<<Register: constant group-family is a group-family>>
@ 

\begin{definition}
We call a relation \define{Group-yielding} if every object in its range
is a group.
\end{definition}

<<Definition: Group-yielding>>=
definition
  let IT be Relation;
  attr IT is Group-yielding means :Def1:
  for y being object st y in rng IT holds
  y is Group;
end;
@ %def Group-yielding Def1

\begin{voc}
We add the attribute ``Group-yielding'' to our vocabulary list.
\end{voc}

<<DICT/GROUP-23.VOC>>=
VGroup-yielding
@

\begin{registration}
If a function is Group-yielding, then it is magma-yielding and 1-sorted-yielding.
\end{registration}

<<Register: Group-yielding implies magma-yielding and 1-sorted-yielding>>=
registration
  cluster Group-yielding -> 1-sorted-yielding for Function;
  coherence;
  cluster Group-yielding -> multMagma-yielding for Function;
  coherence;
end;
@

\begin{theorem}
For any set $I$, if $\mathcal{F}$ is an associative Group-like
magma-family of $I$, then it is group-yielding.
\end{theorem}

<<Theorem: associative Group-like magma-Families are Group-yielding>>=
Lm1:
  for I being set
  for F being associative Group-like multMagma-Family of I
  holds F is Group-yielding
proof
  let I be set;
  let F be associative Group-like multMagma-Family of I;
  for y being object st y in rng F
  holds y is Group
  proof
    let y be object;
    assume y in rng F;
    then ex x being object st x in dom F & y = F.x by FUNCT_1:def 3;
    hence y is Group by GROUP_19:1;
  end;
  hence F is Group-yielding by Def1;
end;
@ %def Lm1

\begin{registration}
Let $\mathcal{F}$ be a magma-family indexed by a set $I$.
If $\mathcal{F}$ is assocative group-like, then it is also group-yielding.
\end{registration}

<<Register: ``associative Group-like'' implies ``Group-yielding'' for magma-families>>=
registration
  let I be set;
  cluster associative Group-like -> Group-yielding for multMagma-Family of I;
  coherence by Lm1;
end;
@

\begin{registration}
Let $I$ be any set. We can affix ``Group-yielding'' as an adjective for
any ``Many sorted set of $I$''.
\end{registration}

<<Register: Group-yielding for Many-sorted set of $I$>>=
registration
  let I be set;
  cluster Group-yielding for ManySortedSet of I;
  existence
  proof
    set G = the trivial Group;
    set f = I --> G;
    take f;
    let a be object;
    assume a in rng f;
    then ex x being object st x in dom f & a = f.x by FUNCT_1:def 3;
    hence thesis by FUNCOP_1:7;
  end;
end;
registration
  let I be set;
  cluster Group-yielding -> 1-sorted-yielding for ManySortedSet of I;
  coherence;
  cluster Group-yielding -> multMagma-yielding for ManySortedSet of I;
  coherence;
end;
@ 

\begin{registration}
We can now register ``Group-yielding'' as an adjective for functions.
\end{registration}

<<Register: Group-yielding for Function>>=
registration
  cluster Group-yielding for Function;
  existence
  proof
    set I = the set, f = the Group-yielding ManySortedSet of I;
    take f;
    thus thesis;
  end;
end;
@

\begin{theorem}
If $I\neq\emptyset$ is a set, $\mathcal{F}$ is a Group-yielding
many-sorted set indexed by $I$, and $i\in I$,
then $\mathcal{F}_{i}$ is a group.
\end{theorem}

<<Theorem: $\mathcal{F}$ is group-yielding family indexed by $I$ and $i\in I$, then $\mathcal{F}_{i}$ is a group>>=
theorem Lm4:
  for I being non empty set
  for F being Group-yielding ManySortedSet of I
  for i being Element of I
  holds F.i is Group
proof
  let I be non empty set;
  let F be Group-yielding ManySortedSet of I;
  let i be Element of I;
  i in I & dom F = I by PARTFUN1:def 2;
  then F.i in rng F by FUNCT_1:3;
  hence F.i is Group by Def1;
end;
@ %def Lm4
\begin{registration}
If $I\neq\emptyset$ is a set, $i\in I$, and $\mathcal{F}$ is a
group-yielding many-sorted set indexed by $I$, then we should register
$\mathcal{F}_{i}$ having the adjectives Group-like associative non-empty
(as a magma) --- i.e., $\mathcal{F}_{i}$ is a group.
\end{registration}

<<Register: F.i is a Group>>=
registration
  let I be non empty set;
  let i be Element of I;
  let F be Group-yielding ManySortedSet of I;
  cluster (F . i) -> Group-like associative unital non empty for multMagma;
  correctness by Lm4;
end;
@

\begin{theorem}
If $I\neq\emptyset$ and $\mathcal{F}$ is a family of groups indexed by
$I$, then for any $i\in I$ we expect $[i,\mathcal{F}_{i}]\in\mathcal{F}$.
\end{theorem}

<<Theorem: Sanity check that $[i,\mathcal{F}_{i}]\in\mathcal{F}$>>=
theorem
  for I being non empty set
  for F being Group-yielding ManySortedSet of I
  for i being object st i in I
  ex G being Group st [i, G] in F
proof
  let I be non empty set;
  let F be Group-yielding ManySortedSet of I;
  let i be object;
  assume A1: i in I;
  then A2: i in dom F by PARTFUN1:def 2;
  F.i is Group by A1, Lm4;
  then consider G being Group such that
  A3: G = F.i;
  take G;
  thus [i, G] in F by A2, A3, FUNCT_1:def 2;
end;
@ 

\begin{registration}
A [[multMagma-Family]] which is ``Group-yielding'' should register as
``Group-like associative'' automatically.
\end{registration}

<<Register: Group-yielding implies Group-like associative for Magma Family>>=
registration
  let I be set;
  cluster Group-yielding -> Group-like associative for multMagma-Family of I;
  correctness
  proof
    thus for F being multMagma-Family of I st F is Group-yielding
    holds F is Group-like associative
    proof
      let F be multMagma-Family of I;
      assume A1: F is Group-yielding;
      A2: dom F = I by PARTFUN1:def 2;
      for i being set st i in I
      ex Fi being non empty Group-like multMagma st Fi = F.i
      proof
        let i be set;
        assume i in I;
        then F.i is Group by A1, A2, FUNCT_1:3;
        hence thesis;
      end;
      then A3: F is Group-like;
      for i being set st i in I
      ex Fi being non empty associative multMagma st Fi = F.i
      proof
        let i be set;
        assume i in I;
        then F.i is Group by A1, A2, FUNCT_1:3;
        hence thesis;
      end;
      hence F is Group-like associative by A3;
    end;
  end;
end;
@ 

\begin{registration}
Group-families (in the sense of \mml{group19}) are group-yielding.
\end{registration}

<<Register: Group-Family is Group-yielding>>=
registration
  let I be set;
  cluster -> Group-yielding for Group-like associative multMagma-Family of I;
  coherence
  proof
    thus for F being Group-like associative multMagma-Family of I
    holds F is Group-yielding
    proof
      let F be Group-like associative multMagma-Family of I;
      for y being object st y in rng F holds y is Group
      proof
        let y be object;
        assume y in rng F;
        then consider i being object such that
        A1: i in dom F & y = F.i
        by FUNCT_1:def 3;
        thus thesis by A1, GROUP_19:1;
      end;
      hence F is Group-yielding;
    end;
  end;
end;
@ 

\begin{definition}
Let $I$ be a set. Then we define a \define{Group-Family} of $I$ to be a
Group-yielding family $\mathcal{F}$ over $I$, i.e., for each $i\in I$ we
have $\mathcal{F}_{i}$ be a group.
\end{definition}

<<Definition: Group-Family>>=
definition
  let I be set;
  mode Group-Family of I is Group-yielding ManySortedSet of I;
end;
@ %def Group-Family

\begin{reserve}
Let $I$ be a non-empty set, $i\in I$, $\mathcal{F}$ be a group family
indexed by $I$, and $G$ be an arbitrary group.
\end{reserve}

<<Reservations of group families>>=
reserve I for non empty set;
reserve i for Element of I;
reserve F for Group-Family of I;
reserve G for Group;
@

\begin{theorem}
Let $\mathcal{F}$ be the constant function $\emptyset\to\{G\}$ for any
group $G$. The $\mathcal{F}$ is a group-family indexed by $\emptyset$.
\end{theorem}

<<Theorem: empty family of groups>>=
theorem LmEmptyGroupFamilyExplicit:
  {} --> G is Group-Family of {}
proof
  {} --> G is ManySortedSet of {} & {} --> G is Group-yielding;
  hence {} --> G is Group-Family of {};
end;
@ %def LmEmptyGroupFamilyExplicit

\begin{theorem}
Let $G$ be a group, $n\in\NN_{0}$ be a non-negative integer.
Then $\mathcal{F}_{i}=G$ for $i=1,\dots,n$ is a Group-family.
\end{theorem}

\begin{thm-remark}
When we write things like $G^{n}$ as the direct product of $n$ copies of
a group $G$, we really mean ``\lstinline{product (Seg n --> G)}''.
\end{thm-remark}

\begin{proof}
The proof boils down to two cases: when $n=0$, then we have the empty
group family. When $n > 0$, we have to prove $\mathcal{F}$ is
group-yielding, which follows quite easily from the fact that
$\mathcal{F}_{i}=G$ for every $i$.
\end{proof}

<<Theorem: $\mathcal{F}_{i}=G$ is a group-family>>=
theorem Th4:
  for n being Nat
  holds Seg n --> G is Group-Family of Seg n
proof
  let n be Nat;
  per cases;
  suppose Seg n is empty;
    hence thesis by LmEmptyGroupFamilyExplicit;
  end;
  suppose A1: not (Seg n is empty);
    for y being object st y in rng (Seg n --> G) holds y is Group
    proof
      let y be object;
      assume y in rng (Seg n --> G);
      then y in {G} by A1, FUNCOP_1:8;
      hence y is Group by TARSKI:def 1;
    end;
    then Seg n --> G is Group-yielding;
    hence Seg n --> G is Group-Family of Seg n;
  end;
end;
@ %def Th4

\begin{registration}
We can now register this fact, since we will want to write things like
``\lstinline{product (Seg n --> G)}'' and treat it like a group without
breaking our stride. Without this, we would need to do things like
writing
``\lstinline{ex F being} \lstinline{Group-Family of Seg n st F = Seg n --> G & ...}''
which is horrible.
\end{registration}

\begin{remark}
We won't have to worry about registering ``\lstinline{Seg n --> G}''
as a Many-sorted set, because this is done in \mml{funcop1}; more
precisely, ``\lstinline{I --> A}'' is registered as
``\lstinline{I-defined}'' and separately
``\lstinline{I-defined total for I-defined Function}''.
Through numerous redefinitions, ``\lstinline{I --> A}'' is eventually
awarded the type of a function. So long as we include the \mml{funcop1}
registrations, everything will work out.
\end{remark}

<<Register: constant group-family is a group-family>>=
registration
  let G be Group;
  let n be Nat;
  cluster (Seg n --> G) -> Group-yielding;
  correctness by Th4;
end;
@ 
