:: Properties of Direct Product Groups
::  by Alex Nelson
::
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies BINOP_1, RLVECT_2, ZFMISC_1, RELAT_1, STRUCT_0, FUNCT_1,
   FUNCT_2, FUNCT_4, FUNCOP_1, NUMBERS, PRALG_1, ALGSTR_0, PARTFUN1,
   CARD_3, GROUP_1, GROUP_2, GROUP_5, GROUP_6, GROUP_7, GROUP_12,
   SUBSET_1, XBOOLE_0, PBOOLE, GROUP_19, GROUP_23, SETFAM_1;

 notations ZFMISC_1, TARSKI, XBOOLE_0, RELAT_1, SUBSET_1, RELSET_1,
   FUNCT_1, BINOP_1, FUNCT_2, FUNCT_4, FUNCT_7, FUNCOP_1,
   PBOOLE, CARD_3, NUMBERS, XXREAL_0, FINSEQ_1, FINSEQ_2, STRUCT_0,
   MONOID_0, GROUP_1, GROUP_2, GROUP_4, GROUP_5, GROUP_6, PRALG_1,
   GROUP_7, GROUP_12, PARTFUN1, GROUP_17, ALGSTR_0, SETFAM_1;

 constructors ZFMISC_1, BINOP_2, PBOOLE, BINOP_1, REALSET1, FUNCT_2,
   FUNCT_4, FUNCOP_1, MONOID_0, PRALG_1, GROUP_1, GROUP_2, GROUP_12,
   GROUP_4, GROUP_5, GROUP_6, GROUP_7, FUNCT_7, RELSET_1, FUNCT_3,
   PARTFUN1, GROUP_17, GRSOLV_1, ALGSTR_0, SETFAM_1, GROUP_19;

 registrations XBOOLE_0, XREAL_0, STRUCT_0, ALGSTR_0, GROUP_1, GROUP_2,
   MONOID_0, NAT_1, RELAT_1, FUNCT_1, PARTFUN1, RELSET_1, FUNCT_2,
   FUNCOP_1, CARD_3, ORDINAL1, FINSET_1, FINSEQ_1, CARD_1, BINOP_1,
   GROUP_3, GROUP_6, GR_CY_1, FUNCT_7, GROUP_7, GROUP_12, PRALG_1,
   PBOOLE;

 definitions TARSKI, SUBSET_1, RELAT_1, FUNCT_1, FUNCT_2, FUNCOP_1, GROUP_7;

 equalities PARTFUN1, FUNCT_1, FUNCT_7, FUNCOP_1, FINSET_1, BINOP_1,
   STRUCT_0, GROUP_2, GROUP_3, GROUP_4, GROUP_6, GROUP_7;

 expansions TARSKI, FUNCT_7, FINSET_1, ALGSTR_0, GROUP_1, GROUP_2,
   GROUP_6, STRUCT_0, BINOP_1, FUNCT_1, FUNCT_2, PRALG_1, GROUP_7;

 theorems TARSKI, FUNCT_1, FUNCT_2, FUNCT_7, FUNCOP_1, CARD_3, GROUP_2,
   GROUP_5, GROUP_6, GROUP_7, GROUP_12, PARTFUN1, PRALG_1, GROUP_19,
   SETFAM_1, XBOOLE_0, GROUP_21;

 requirements BOOLE, SUBSET, NUMERALS, ARITHM, REAL;

 schemes FUNCT_1, FUNCT_2, PBOOLE;

begin

definition
  let IT be Relation;
  attr IT is Group-yielding means :Def1:
  for y being object st y in rng IT holds
  y is Group;
end;

registration
  cluster Group-yielding -> 1-sorted-yielding for Function;
  coherence;
  cluster Group-yielding -> multMagma-yielding for Function;
  coherence;
end;

registration
  let I be set;
  cluster Group-yielding for ManySortedSet of I;
  existence
  proof
    set G = the trivial Group;
    set f = I --> G;
    take f;
    let a be object;
    assume a in rng f;
    then ex x being object st x in dom f & a = f.x by FUNCT_1:def 3;
    hence thesis by FUNCOP_1:7;
  end;
end;

registration
  let I be set;
  cluster Group-yielding -> 1-sorted-yielding for ManySortedSet of I;
  coherence;
  cluster Group-yielding -> multMagma-yielding for ManySortedSet of I;
  coherence;
end;

registration
  cluster Group-yielding for Function;
  existence
  proof
    set I = the set, f = the Group-yielding ManySortedSet of I;
    take f;
    thus thesis;
  end;
end;

theorem Lm4:
  for I being non empty set
  for F being Group-yielding ManySortedSet of I
  for i being Element of I
  holds F.i is Group
proof
  let I be non empty set;
  let F be Group-yielding ManySortedSet of I;
  let i be Element of I;
  i in I & dom F = I by PARTFUN1:def 2;
  then F.i in rng F by FUNCT_1:3;
  hence F.i is Group by Def1;
end;

registration
  let I be non empty set;
  let i be Element of I;
  let F be Group-yielding ManySortedSet of I;
  cluster (F . i) -> Group-like associative unital non empty for multMagma;
  correctness by Lm4;
end;

theorem
  for I being non empty set
  for F being Group-yielding ManySortedSet of I
  for i being object st i in I
  ex G being Group st [i, G] in F
proof
  let I be non empty set;
  let F be Group-yielding ManySortedSet of I;
  let i be object;
  assume A1: i in I;
  then A2: i in dom F by PARTFUN1:def 2;
  F.i is Group by A1,Lm4;
  then consider G being Group such that
  A3: G = F.i;
  take G;
  thus [i, G] in F by A2,A3,FUNCT_1:def 2;
end;

:: Our notion of "Group-Family" *is* a Group-Family in the sense of GROUP_19
registration
  let I be set;
  cluster Group-yielding -> Group-like associative for multMagma-Family of I;
  correctness
  proof
    thus for F being multMagma-Family of I st F is Group-yielding
    holds F is Group-like associative
    proof
      let F be multMagma-Family of I;
      assume A1: F is Group-yielding;
      A2: dom F = I by PARTFUN1:def 2;
      for i being set st i in I
      ex Fi being non empty Group-like multMagma st Fi = F.i
      proof
        let i be set;
        assume i in I;
        then F.i is Group by A1,A2,Def1,FUNCT_1:3;
        hence thesis;
      end;
      then A3: F is Group-like by Def1, GROUP_7:def 3;
      for i being set st i in I
      ex Fi being non empty associative multMagma st Fi = F.i
      proof
        let i be set;
        assume i in I;
        then F.i is Group by A1,A2,Def1,FUNCT_1:3;
        hence thesis;
      end;
      hence F is Group-like associative by A3;
    end;
  end;
end;

registration
  let I be set;
  cluster -> Group-yielding for Group-like associative multMagma-Family of I;
  coherence
  proof
    thus for F being Group-like associative multMagma-Family of I
    holds F is Group-yielding
    proof
      let F be Group-like associative multMagma-Family of I;
      for y being object st y in rng F holds y is Group
      proof
        let y be object;
        assume A1: y in rng F;
        then consider i being object such that
        A2: i in dom F and
        A3: y = F.i
        by FUNCT_1:def 3;
        dom F = I by PARTFUN1:def 2;
        A4: i in I by A2, PARTFUN1:def 2;
        then F.i is Group by GROUP_19:1;
        hence thesis by A3;
      end;
      hence F is Group-yielding;
    end;
  end;
end;

definition
  let I be set;
  mode Group-Family of I is Group-yielding ManySortedSet of I;
end;

theorem LmTriv:
  for M being strict multMagma
  st (ex x being object st the carrier of M = {x})
  ex G being strict trivial Group st M=G
proof
  let M be strict multMagma;
  given x being object such that 
  A1: the carrier of M = {x};
  reconsider M as non empty multMagma by A1;
  reconsider x as Element of M by A1, TARSKI:def 1;
  for a,b,c being Element of M holds (a * b) * c = a * (b * c)
  proof
    let a,b,c be Element of M;
    (a * b) * c = x & a * (b * c) = x by A1, TARSKI:def 1;
    hence (a * b) * c = a * (b * c);
  end;
  then A2: M is associative;
  
  ex e being Element of M st
  for h being Element of M holds
  (h * e = h & e * h = h & ex g being Element of M st (h * g = e & g * h = e))
  proof
    take e = x;
    let h be Element of M;
    h = x by A1, TARSKI:def 1;
    hence h * e = h & e * h = h by A1, TARSKI:def 1;
    take g = x;
    thus thesis by A1, TARSKI:def 1;
  end;
  then M is Group-like;
  then reconsider G=M as strict trivial Group by A1, A2;
  take G;
  thus thesis;
end;

theorem
  for I being empty set
  for F being multMagma-Family of I
  holds product F is trivial Group
proof
  let I be empty set;
  let F be multMagma-Family of I;
  product (Carrier F) = {{}} by CARD_3:10;
  then ex G being strict trivial Group st (product F)=G by LmTriv, GROUP_7:def 2;
  hence thesis;
end;

reserve I for non empty set;
reserve i for Element of I;
reserve F for Group-Family of I;
reserve G for Group;

:: Uniqueness of morphisms to the trivial group
theorem Th1:
  for H being trivial Group
  for f1,f2 being Homomorphism of G,H
  holds f1=f2
proof
  let H be trivial Group;
  let f1,f2 be Homomorphism of G,H;
  A1: the carrier of H = {1_H}
  proof
    H is trivial;
    then consider x being object such that
    B1: the carrier of H = {x};
    thus thesis by B1, TARSKI:def 1;
  end;
  for g being object st g in the carrier of G holds f1.g = f2.g
  proof
    let g be object;
    assume B1: g in the carrier of G;
    f1.g in H by B1,FUNCT_2:5;
    then B2: f1.g = 1_H by A1, TARSKI:def 1;
    f2.g in H by B1,FUNCT_2:5;
    hence f1.g = f2.g by A1, B2, TARSKI:def 1;
  end;
  hence f1=f2;
end;

:: Universal property of terminal object for the trivial group
theorem
  for H being trivial Group
  ex h being Homomorphism of G,H 
  st (for f being Homomorphism of G,H holds h=f)
proof
  let H be trivial Group;
  take h = 1:(G,H);
  thus thesis by Th1;
end;

theorem
  for H being trivial Group
  for f being Homomorphism of G,H
  for g being Element of G
  holds f.g = 1_H
proof
  let H be trivial Group;
  let f be Homomorphism of G,H;
  let g be Element of G;
  f = 1:(G,H) by Th1;
  hence f.g = 1_H;
end;

theorem Th4:
  for i being Element of I
  for g being Element of product F
  holds g.i is Element of F.i
proof
  let i be Element of I;
  let g be Element of product F;
  g is Function & g in product F;
  then g.i in F.i by GROUP_19:5;
  hence thesis;
end;

definition
  let I be non empty set;
  let F be Group-Family of I;
  let g be Element of product F;
  let i be Element of I;
  func g/.i -> Element of F.i equals :Def2: g.i;
  correctness by Th4;
end;

:: Compare to CARD_3:def and PRALG_3:def 2 
definition
  let I be non empty set;
  let i be Element of I;
  let F be Group-Family of I;
  func proj (F, i) -> Homomorphism of (product F), F.i means
  :Def3:
  for h being Element of product F holds it.h = h.i;
  existence
  proof
    deffunc F1() = product F;
    deffunc F2() = F.i;
    deffunc F3(Element of F1()) = $1/.i;
    consider p being Function of F1(), F2() such that
    A1: for x being Element of F1() holds p.x = F3(x)
    from FUNCT_2:sch 4;
    reconsider p as Function of product F, F.i;
    
    for a, b being Element of product F
    holds p.(a * b) = (p.a) * (p.b)
    proof
      let a, b be Element of product F;
      (p.a) * (p.b) = (p.a) * (b/.i) by A1
                   .= (a/.i) * (b/.i) by A1
                   .= (a * b)/.i by GROUP_7:1
                   .= p.(a * b) by A1;
      hence p.(a * b) = (p.a) * (p.b);
    end;
    then reconsider p as Homomorphism of product F,F.i by GROUP_6:def 6;
    take p;
    for h being Element of product F holds p.h = h.i
    proof
      let h be Element of product F;
      p.h = h/.i by A1;
      hence thesis;
    end;
    hence thesis;
 end;
  uniqueness
  proof
    let p1,p2 be Homomorphism of (product F), F.i;
    assume A1: for h being Element of product F holds p1.h = h.i;
    assume A2: for h being Element of product F holds p2.h = h.i;
    for x being object st x in the carrier of product F holds p1.x = p2.x
    proof
      let x be object;
      assume x in the carrier of product F;
      then reconsider xx=x as Element of product F;
      p1.x = xx.i by A1;
      hence p1.x = p2.x by A2;
    end;
    hence p1 = p2;
  end;
end;

theorem
  proj (F, i) is onto
proof
  for y being object
  holds y in the carrier of F.i iff
  ex x being object st x in dom (proj (F,i)) & y = (proj (F,i)).x
  proof
    let y be object;
    thus y in the carrier of F.i
         implies ex x being object
                 st x in dom (proj (F,i))
                    & y = (proj (F,i)).x
    proof 
      assume y in the carrier of F.i;
      then reconsider yy=y as Element of F.i;
      (1ProdHom (F, i)).yy in ProjGroup (F, i);
      then (1ProdHom (F, i)).yy in ProjSet (F, i) by GROUP_12:def 2;
      then consider x being Function, g being Element of F.i such that
      A1: x = (1ProdHom (F, i)).yy & dom x = I & x.i = g &
          for j being Element of I st j <> i holds x.j = 1_(F.j)
      by GROUP_12:2;

      the carrier of (product F) = product (Carrier F) by GROUP_7:def 2;
      then dom (1_(product F)) = I by PARTFUN1:def 2;
      then A2: y = ((1_(product F)) +* (i, y)).i by FUNCT_7:31
                .= g by A1, GROUP_12:def 3;
      A3: x in product F by A1,GROUP_2:41;
      take x;
      thus x in dom (proj (F,i)) by A3, FUNCT_2:def 1;
      thus y = (proj (F,i)).x by Def3, A1, A2, A3;
    end;
    thus (ex x being object st x in dom (proj (F,i)) & y = (proj (F,i)).x)
         implies y in the carrier of F.i by FUNCT_2:5;
  end;
  hence proj (F, i) is onto by FUNCT_1:def 3;
end;

theorem
  dom proj (F, i) = the carrier of product F &
  for y being Function st y in product F
  holds (proj (F,i)).y = y.i by Def3, FUNCT_2:def 1;

theorem Th8:
  proj (Carrier F, i) is Function of product (Carrier F), the carrier of F.i
proof
  set X = product (Carrier F);
  set Y = the carrier of F.i;
  set f = proj (Carrier F, i);
  B1: dom f = X by CARD_3:def 16;
  for x being object st x in X holds f.x in Y
  proof
    let x be object;
    assume C1: x in X;
    then reconsider y=x as Element of product F by GROUP_7:def 2;
    f.y = y/.i by B1, C1, CARD_3:def 16;
    hence f.x in Y;
  end;
  
  hence f is Function of X,Y by B1,FUNCT_2:3;
end;

theorem Th9:
  for g being Element of product F
  holds proj (F, i) . g = proj (Carrier F, i) . g 
proof
  let g be Element of product F;
  set X = product (Carrier F);
  set f = proj (Carrier F, i);
  B1: dom f = X by CARD_3:def 16;
  g in product F;
  then g in dom f by B1,GROUP_7:def 2;
  then (proj (Carrier F, i)) . g = g.i by CARD_3:def 16;
  hence (proj (F, i)) . g = (proj (Carrier F, i)) . g by Def3;
end;

theorem
  proj (F, i) = proj (Carrier F, i)
proof
  set X = product (Carrier F);
  set Y = the carrier of F.i;
  product (Carrier F) = the carrier of (product F) by GROUP_7:def 2;
  then A1: proj (Carrier F, i) is Function of X,Y
           & proj (F, i) is Function of X,Y
  by Th8;
  for x being Element of X
  holds (proj (F, i)) . x = (proj (Carrier F, i)) . x
  proof
    let x be Element of X;
    x is Element of product F by GROUP_7:def 2;
    hence thesis by Th9;
  end;
  hence thesis by A1,FUNCT_2:63;
end;

definition
  let G be Group;
  let I be non empty set;
  let F be Group-Family of I;
  mode Homomorphism-Family of G, F -> ManySortedFunction of I means
  :Def6:
  for i being Element of I holds
  it.i is Homomorphism of G, (F.i);
  existence
  proof
    deffunc F1() = I;
    deffunc F2(Element of I) = 1:(G,F.$1);
    consider f being ManySortedSet of F1() such that
    A1: for i being Element of F1() holds f.i = F2(i)
    from PBOOLE:sch 5;
    for x being object st x in dom f holds f.x is Function
    proof
      let x be object;
      assume x in dom f;
      then reconsider i=x as Element of I;
      f.i = 1:(G,F.i) by A1;
      hence f.x is Function;
    end;
    then reconsider f as ManySortedFunction of I by FUNCOP_1:def 6;
    take f;
    thus for i being Element of I holds f.i is Homomorphism of G,F.i
    proof
      let i be Element of I;
      f.i = 1:(G,F.i) by A1;
      hence f.i is Homomorphism of G,F.i;
    end;
  end;
end;

:: I hate this, but have no better alternative
definition
  let G be Group;
  let I be non empty set;
  let F be Group-Family of I;
  let f be Homomorphism-Family of G, F;
  let i be Element of I;
  redefine func f.i -> Homomorphism of G, F.i;
  coherence by Def6;
end;

reserve f for Homomorphism-Family of G, F;

theorem
  [i, f.i] in f
proof
  i in I & f is ManySortedSet of I;
  then i in dom f by PARTFUN1:def 2;
  hence [i, f.i] in f by FUNCT_1:def 2;
end;

:: Surjective functions have a right-inverse
theorem
  for X,Y being non empty set
  for f being Function of X,Y
  st f is onto
  ex g being Function of Y,X
  st f * g = id Y
proof
  let X,Y be non empty set;
  let f be Function of X,Y;
  assume A1: f is onto;
  defpred P[object, object] means $1 = f.$2;
  
  A2: for y being object st y in Y
  ex x being object st x in X & P[y, x]
  proof
    let y be object;
    assume y in Y;
    then reconsider yy=y as Element of Y;
    consider x being Element of X such that
    B1: f.x = yy
    by A1,GROUP_6:58;
    take x;
    thus x in X;
    thus P[y, x] by B1;
  end;

  consider g being Function of Y,X such that
  A3: for y being object st y in Y holds P[y, g.y]
  from FUNCT_2:sch 1(A2);
  
  take g;
  for y being Element of Y holds (f * g).y = y
  proof
    let y be Element of Y;
    B1: dom g = Y & dom (f * g) = dom g by FUNCT_2:123, FUNCT_2:def 1;
    y = f.(g.y) by A3
     .= (f * g).y by B1, FUNCT_1:12;
    hence (f * g).y = y;
  end;
  hence f * g = id Y;
end;

Lm5:
  (Carrier F).i = the carrier of F.i
proof
  ex R being 1-sorted
  st (R = (F.i) & (Carrier F).i = the carrier of R) by PRALG_1:def 15;
  hence (Carrier F).i = the carrier of F.i;
end;

:: Universal property of group product, explicit version.
theorem Th13:
  for f being Homomorphism-Family of G, F
  ex phi being Homomorphism of G, product F
  st for g being Element of G
     holds (for j being Element of I holds (f.j).g = (proj (F,j)) . (phi.g))
proof
  let f be Homomorphism-Family of G, F;
  defpred P[object, object] means ex g0 being Element of product F
  st $2 = g0 & (for j being Element of I holds (f.j).$1 = g0.j);
  deffunc F1() = the carrier of G;

  A1: for x being object st x in F1()
  ex y being object st y in the carrier of product F &
  P[x, y]
  proof
    let x be object;
    assume x in F1();
    then reconsider xx=x as Element of G;
    defpred P1[object, object] means ex i being Element of I st
    i = $1 & $2 = ((f.i).xx);
    B1: for i, y1, y2 being object st i in I & P1[i, y1] & P1[i, y2]
        holds y1 = y2;
    B2: for i being object st i in I ex y being object st P1[i, y]
    proof
      let i be object;
      assume i in I;
      then reconsider ii=i as Element of I;
      consider y being object such that
      C1: y = ((f.ii).xx);
      take y;
      thus P1[i, y] by C1;
    end;

    consider y being Function such that
    B3: dom y = I and
    B4: for j being object st j in I holds P1[j, y.j]
    from FUNCT_1:sch 2(B1, B2);
    take y;
    thus y in the carrier of product F
    proof
      C1: dom y = dom (Carrier F) by B3,PARTFUN1:def 2;
      for i being Element of I holds y.i in (Carrier F).i
      proof
        let i be Element of I;
        P1[i, y.i] by B4;
        then consider ii being Element of I such that
        D1: ii=i & y.i = ((f.i).xx);
        (Carrier F).i = the carrier of F.i by Lm5; 
        hence thesis by D1;
      end;
      then for i being object st i in dom (Carrier F) holds y.i in (Carrier F).i;
      then y in product (Carrier F) by C1, CARD_3:9;
      hence thesis by GROUP_7:def 2;
    end;
    then consider g0 being Element of product F such that
    B5: g0 = y;
    take g0;
    thus y = g0 by B5;
    let j be Element of I;
    P1[j, g0.j] by B4, B5;
    hence (f.j).x = g0.j;
  end;

  consider phi being Function of F1(), the carrier of (product F)
  such that
  A2: for x being object st x in F1() holds P[x, phi.x]
  from FUNCT_2:sch 1(A1);
  reconsider phi as Function of G, product F;

  A3: for g being Element of G
  for j being Element of I
  holds (phi.g).j = (f.j).g
  proof
    let g be Element of G;
    let j be Element of I;
    P[g, phi.g] by A2;
    hence (phi.g).j = (f.j).g;
  end;

  for a, b being Element of G holds phi.(a * b) = (phi.a) * (phi.b)
  proof
    let a, b be Element of G;
    (phi.(a * b)) is Element of product (Carrier F)
    & (phi.a)*(phi.b) is Element of product (Carrier F)
    by GROUP_7:def 2;
    then B1: dom (phi.(a * b)) = I & dom ((phi.a)*(phi.b)) = I
    by PARTFUN1:def 2;
    for j being Element of I holds (phi.(a * b)).j = ((phi.a) * (phi.b)).j
    proof
      let j be Element of I;
      reconsider fj = f.j as Homomorphism of G, F.j;
      (phi.(a * b)).j = fj.(a * b) by A3
      .= (fj.a) * (fj.b) by GROUP_6:def 6
      .= ((phi.a)/.j) * (fj.b) by A3
      .= ((phi.a)/.j) * ((phi.b)/.j) by A3
      .= ((phi.a) * (phi.b))/.j by GROUP_7:1;
      hence (phi.(a * b)).j = ((phi.a) * (phi.b)).j;
    end;
    hence phi.(a * b) = (phi.a) * (phi.b) by B1;
  end;
  then reconsider phi as Homomorphism of G, product F by GROUP_6:def 6;
  
  take phi;
  let g be Element of G;
  for j being Element of I holds (f.j).g = (proj (F, j)) . (phi.g)
  proof
    let j be Element of I;
    (f.j).g = (phi.g).j by A3;
    hence (f.j).g = (proj (F, j)).(phi.g) by Def3;
  end;
  hence thesis;
end;

theorem
  for G1, G2 being Group
  for f1, f2 being Homomorphism of G1,G2
  st (for g being Element of G1 holds f1.g = f2.g)
  holds f1 = f2;

:: Universal property of group product, as most people would recognize it.
theorem
  for f being Homomorphism-Family of G, F
  for i being Element of I
  ex phi being Homomorphism of G, product F
  st f.i = (proj (F,i)) * phi
proof
  let f be Homomorphism-Family of G, F;
  let i be Element of I;
  consider phi being Homomorphism of G, product F such that
  A1: for g being Element of G
      holds (for j being Element of I holds (f.j).g = (proj (F,j)) . (phi.g))
  by Th13;
  take phi;
  for g being Element of G holds ((proj (F,i)) * phi).g = (f.i).g
  proof
    let g be Element of G;
    ((proj (F,i)) * phi).g = (proj (F, i)) . (phi.g) by FUNCT_2:15
                          .= (f.i).g by A1;
    hence thesis;
  end;
  hence f.i = (proj (F,i)) * phi;
end;

:: Uniqueness part of the universal property of group products
theorem
  for f being Homomorphism-Family of G, F
  for phi1, phi2 being Homomorphism of G, product F
  st (for i being Element of I holds f.i = (proj (F,i)) * phi1)
     & (for i being Element of I holds f.i = (proj (F,i)) * phi2)
  holds phi1 = phi2
proof
  let f be Homomorphism-Family of G, F;
  let phi1, phi2 be Homomorphism of G, product F;
  assume A1: for i being Element of I holds f.i = (proj (F,i)) * phi1;
  assume A2: for i being Element of I holds f.i = (proj (F,i)) * phi2;
  for g being Element of G holds phi1.g = phi2.g
  proof
    let g be Element of G;
    phi1.g is Element of product (Carrier F) 
    & phi2.g is Element of product (Carrier F) by GROUP_7:def 2;
    then B1: dom (phi1.g) = I & dom (phi2.g) = I by PARTFUN1:def 2;
    for j being Element of I holds (phi1.g).j = (phi2.g).j
    proof
      let j be Element of I;
      C2: (f.j).g = ((proj (F, j)) * phi1).g by A1
                 .= (proj (F, j)) . (phi1.g) by FUNCT_2:15
                 .= (phi1.g).j by Def3;
      (f.j).g = ((proj (F, j)) * phi2).g by A2
             .= (proj (F, j)) . (phi2.g) by FUNCT_2:15
             .= (phi2.g).j by Def3;
      hence (phi1.g).j = (phi2.g).j by C2;
    end;
    hence phi1.g = phi2.g by B1;
  end;
  hence phi1 = phi2;
end;

definition
  let G be Group;
  let I be non empty set;
  let F be Group-Family of I;
  let f be Homomorphism-Family of G, F;
  func product f -> Homomorphism of G, product F means
  :Def7:
  for g being Element of G
  for i being Element of I
  holds (f.i).g = (it.g).i;
  existence
  proof
    consider phi being Homomorphism of G, product F such that
    A1: for g being Element of G
        holds (for j being Element of I holds (f.j).g = (proj (F,j)) . (phi.g))
    by Th13;
    take phi;
    for g being Element of G
    for j being Element of I holds (f.j).g = (phi.g).j
    proof
      let g be Element of G;
      let j be Element of I;
      (f.j).g = (proj (F,j)) . (phi.g) by A1
             .= (phi.g).j by Def3;
      hence thesis;
    end;
    hence thesis;
  end;
  uniqueness
  proof
    for phi1,phi2 being Homomorphism of G,product F
    st (for g being Element of G
        for i being Element of I
        holds (f.i).g = (phi1.g).i)
     & (for g being Element of G
        for i being Element of I
        holds (f.i).g = (phi2.g).i)
    holds phi1 = phi2
    proof
      let phi1,phi2 be Homomorphism of G,product F;
      assume A1: for g being Element of G
                 for i being Element of I
                 holds (f.i).g = (phi1.g).i;
      assume A2: for g being Element of G for i being Element of I
                 holds (f.i).g = (phi2.g).i;
      for g being Element of G
      holds phi1.g = phi2.g
      proof
        let g be Element of G;
        phi1.g is Element of product (Carrier F) 
        & phi2.g is Element of product (Carrier F) by GROUP_7:def 2;
        then A3: dom (phi1.g) = I & dom (phi2.g) = I by PARTFUN1:def 2;
        for j being Element of I holds (phi1.g).j = (phi2.g).j
        proof
          let j be Element of I;
          (phi1.g).j = (f.j).g by A1
                    .= (phi2.g).j by A2;
          hence (phi1.g).j = (phi2.g).j;
        end;
        hence phi1.g = phi2.g by A3;
      end;
      hence phi1 = phi2;
    end;
    hence thesis;
  end;
end;

theorem Th17:
  for g being Element of G
  holds (for i being Element of I holds ((product f).g).i = 1_(F.i))
  iff (product f).g = 1_(product F)
proof
  let g be Element of G;
  thus (for i being Element of I holds ((product f).g).i = 1_(F.i))
  implies (product f).g = 1_(product F)
  proof
    assume A1: for i being Element of I holds ((product f).g).i = 1_(F.i);
    set s = (product f).g;
    A2: for i being set
    st i in I
    holds (ex FG being non empty Group-like multMagma st FG = F.i & s.i = (1_FG))
    proof
      let i be set;
      assume i in I;
      then reconsider ii=i as Element of I;
      take FG = F.ii;
      thus thesis by A1;
    end;
    s is ManySortedSet of I
    proof
      s is Element of product (Carrier F) by GROUP_7:def 2;
      hence s is ManySortedSet of I;
    end;
    hence thesis by A2, GROUP_7:5;
  end;
  thus (product f).g = 1_(product F) implies
  (for i being Element of I holds ((product f).g).i = 1_(F.i)) by GROUP_7:6;
end;


theorem Th18:
  for g being Element of G
  holds g in Ker (product f)
        iff (for i being Element of I holds g in Ker (f.i))
proof
  let g be Element of G;
  thus g in Ker (product f)
       implies (for i being Element of I holds g in Ker (f.i))
  proof
    assume A1: g in Ker (product f);
    let i be Element of I;
    (product f).g = 1_(product F) by A1,GROUP_6:41;
    then 1_(F.i) = ((product f).g).i by Th17
                .= (f.i).g by Def7;
    hence g in Ker (f.i) by GROUP_6:41;
  end;
  thus (for i being Element of I holds g in Ker (f.i))
       implies g in Ker (product f)
  proof
    assume A1: for i being Element of I holds g in Ker (f.i);
    A2: for i being Element of I holds (f.i).g = 1_(F.i)
    proof
      let i be Element of I;
      g in Ker (f.i) by A1;
      hence (f.i).g = 1_(F.i) by GROUP_6:41;
    end;
    for i being Element of I holds ((product f).g).i = 1_(F.i)
    proof
      let i be Element of I;
      ((product f).g).i = (f.i).g by Def7
                       .= 1_(F.i) by A2;
      hence thesis;
    end;
    then (product f).g = 1_(product F) by Th17;
    hence g in Ker (product f) by GROUP_6:41;
  end;
end;

theorem
  the carrier of Ker (product f) = meet { the carrier of Ker (f.i) where
  i is Element of I : not contradiction }
proof
  set Fam = { the carrier of Ker (f.i) where i is Element of I : not contradiction };
  A1: Fam <> {}
  proof
    set i = the Element of I;
    the carrier of Ker (f.i) in Fam;
    hence thesis;
  end;
  A3: for g being object
  holds g in Ker (product f)
        iff (for A being set st A in Fam holds g in A)
  proof
    let g be object;
    hereby 
      assume B1: g in Ker (product f);
      let A be set;
      assume A in Fam;
      then consider i1 being Element of I such that
      B2: A = the carrier of Ker(f.i1);
      g in G & g in Ker (product f) by B1, GROUP_2:40;
      then g in Ker (f.i1) by Th18;
      hence g in A by B2;
    end;
    assume B1: for A being set st A in Fam holds g in A;
    g in G & for i being Element of I holds g in Ker (f.i)
    proof
      ex x being object st x in Fam by A1, XBOOLE_0:def 1;
      then consider A0 being set such that
      B2: A0 in Fam; 
      consider i0 being Element of I such that
      B3: A0 = the carrier of Ker (f.i0) by B2;
      g in Ker (f.i0) by B1, B2, B3;
      hence g in G by GROUP_2:40;
      
      let i be Element of I;
      the carrier of Ker (f.i) in Fam;
      hence g in Ker (f.i) by B1;
    end;

    hence g in Ker (product f) by Th18;
  end;
  A4: for g being object
  holds g in Ker (product f)
        iff g in (meet Fam)
  proof
    let g be object;
    g in Ker (product f) iff (for A being set st A in Fam holds g in A) by A3;
    hence thesis by A1, SETFAM_1:def 1;
  end;
  for g being object
  holds g in the carrier of Ker (product f) iff g in meet Fam
  proof
    let g be object;
    g in the carrier of Ker (product f) iff g in Ker (product f);
    hence thesis by A4;
  end;
  hence thesis by TARSKI:2;
end;

theorem
  for Z being Group-Family of I
  st (for i being Element of I holds Z.i = center (F.i))
  holds center (product F) = product Z
proof
  let Z be Group-Family of I;
  assume A1: for i being Element of I holds Z.i = center (F.i);
  product F is strict Group;
  A2: for a being Element of product F
  holds a in product Z iff
  for b being Element of product F holds a*b = b*a
  proof
    let a be Element of product F;
    thus a in product Z implies (for b being Element of product F holds a*b = b*a)
    proof
      assume B1: a in product Z;
      let b be Element of product F;
      reconsider ab=a*b, ba=b * a as Element of product F;
      B2: dom (Carrier F) = I by PARTFUN1:def 2;
      product F is non empty;
      then ab in product F & ba in product F;
      then ab in product (Carrier F) & ba in product (Carrier F) by GROUP_7:def 2;
      then B3: dom ab = I & dom ba = I by B2, CARD_3:9;
      for i being Element of I holds (a * b).i = (b * a).i
      proof
        let i be Element of I;
        a.i in Z.i by B1, GROUP_19:5;
        then C1: a.i in center (F.i) by A1;
        (a * b).i = (a/.i) * (b/.i) by GROUP_7:1
        .= (b/.i) * (a/.i) by C1, GROUP_5:77
        .= (b * a).i by GROUP_7:1;
        hence thesis;
      end;
      then for i being Element of I holds ab.i = ba.i;
      hence a*b = b*a by B3, FUNCT_1:def 3;
    end;
    thus (for b being Element of product F holds a*b = b*a)
         implies a in product Z
    proof
      assume B1: for b being Element of product F holds a*b = b*a;
      then a in center (product F) by GROUP_5:77;
      B3: dom (Carrier F) = I & dom (Carrier Z) = I by PARTFUN1:def 2;
      B2: for i being Element of I
      holds a.i in Z.i
      proof
        let i be Element of I;
        C1: for b being Element of product F holds
        (a/.i)*(b/.i) = (b/.i) * (a /.i)
        proof
          let b be Element of product F;
          (a * b) = (b * a) by B1;
          then C1: (a * b).i = (a /. i) * (b /. i) by GROUP_7:1;
          (a * b) = (b * a) by B1;
          then (b * a).i = (b /. i) * (a /. i) by GROUP_7:1;
          hence thesis by C1,B1;
        end;
        for bi being Element of F.i
        holds (a/.i)*bi = bi*(a/.i)
        proof
          let bi be Element of F.i;
          i is Element of I & F is Group-like associative multMagma-Family of I;
          then reconsider b= (1ProdHom (F, i)).bi as Element of product F
          by GROUP_12:def 3, GROUP_2:42;
          D1: dom (1_(product F)) = I by GROUP_19:3;
          b = (1_(product F)) +* (i, bi) by GROUP_12:def 3;
          then b/.i = bi by D1, B3, FUNCT_7:31;
          then (a/.i)*bi = bi * (a /.i) by C1;
          hence thesis by C1;
        end;

        then C1: a.i in center (F.i) by GROUP_5:77;
        hence a.i in Z.i by A1;
      end;
      a in product F;
      then a in product (Carrier F) by GROUP_7:def 2;
      then B4: dom a = I by B3, CARD_3:9;
      then B5: dom a = dom (Carrier Z) by B3;
      for i being object st i in dom (Carrier Z) holds a.i in (Carrier Z).i
      proof
        let i be object;
        assume Z1: i in dom (Carrier Z);
        then reconsider ii=i as Element of I;
        a.i in Z.ii by B2;
        then Z2: a.i in the carrier of (Z.ii) by Z1,B2;
        i in I by B3,Z1;
        then ex R being 1-sorted st
        (R = Z.i & (Carrier Z).i = the carrier of R) by PRALG_1:def 15;
        hence a.i in (Carrier Z).i by B3, Z1, Z2, CARD_3:9;
      end;
      then a in product (Carrier Z) by B3, B5, CARD_3:9;
      hence a in product Z by GROUP_7:def 2;
    end;
  end;

  A3: for a being Element of product F
  holds a in product Z iff a in center (product F)
  proof
    let a be Element of product F;
    hereby 
      assume a in product Z;
      then for b being Element of product F holds a*b = b*a by A2;
      hence a in center (product F) by GROUP_5:77;
    end;
    assume a in center (product F);
    then for b being Element of product F holds a*b = b*a by GROUP_5:77;
    hence a in product Z by A2;
  end;
  for i being Element of I holds Z.i is Subgroup of F.i
  proof
    let i be Element of I;
    Z.i = center (F.i) by A1;
    hence Z.i is Subgroup of F.i by GROUP_5:def 10;
  end;
  then product Z is Subgroup of product F by GROUP_21:23;
  hence thesis by A3, GROUP_2:60;
end;

theorem
  for D being Group-Family of I
  st (for i being Element of I holds D.i = (F.i)`)
  holds (product F)` = product D;
::>                            *4

::> 4: This inference is not accepted
