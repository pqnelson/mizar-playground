:: Properties of Direct Product Groups
::  by Alex Nelson
::
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies RLVECT_2, PARTFUN1, ZFMISC_1, RELAT_1, STRUCT_0, FUNCT_1,
   FUNCT_2, FUNCT_4, FUNCOP_1, NUMBERS, CARD_3, BINOP_1, GROUP_1,
   GROUP_6, GROUP_7, GROUP_12, SUBSET_1, XBOOLE_0, PBOOLE, GROUP_19;

 notations TARSKI, XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, RELSET_1,
   PARTFUN1, FUNCT_2, FUNCT_4, FUNCT_7, FUNCOP_1, PBOOLE, CARD_3,
   NUMBERS, XXREAL_0, FINSEQ_1, FINSEQ_2, STRUCT_0, ALGSTR_0, MONOID_0,
   GROUP_1, GROUP_2, GROUP_4, GROUP_6, PRALG_1, GROUP_7, GROUP_12,
   GROUP_17, GROUP_19;

 constructors PBOOLE, BINOP_1, REALSET1, FUNCT_4, FUNCOP_1, ALGSTR_0,
   MONOID_0, PRALG_1, GROUP_1, GROUP_2, GROUP_12, GROUP_4, GROUP_6,
   GROUP_7, FUNCT_7, RELSET_1, FUNCT_3, GROUP_17, GRSOLV_1, GROUP_19;

 registrations XBOOLE_0, XREAL_0, STRUCT_0, GROUP_2, MONOID_0, NAT_1,
   RELAT_1, FUNCT_1, PARTFUN1, RELSET_1, FUNCT_2, FUNCOP_1, CARD_3, ORDINAL1,
   FINSET_1, FINSEQ_1, NUMBERS, INT_1, INT_2, XCMPLX_0, CARD_1, NEWTON,
   FINSEQ_2, BINOP_1, GROUP_1, GROUP_3, GROUP_6, GR_CY_1, FUNCT_7,
   GROUP_7, GROUP_12, PBOOLE;

 definitions TARSKI, SUBSET_1, FUNCT_1, FUNCT_2, FUNCOP_1, FINSEQ_1,
   PRALG_1, GROUP_1, GROUP_3, GROUP_4, GROUP_6, XXREAL_0, GROUP_7,
   FUNCT_7;

 equalities PARTFUN1, FUNCT_7, FUNCOP_1, FINSET_1, BINOP_1, REALSET1,
   STRUCT_0, GROUP_2, GROUP_3, GROUP_4, GROUP_6, GR_CY_1, ALGSTR_0,
   PRALG_1, GROUP_7;

 expansions TARSKI, FUNCT_7, FINSET_1, GROUP_1, GROUP_2, GROUP_6,
   STRUCT_0, BINOP_1, FUNCT_2, PRALG_1, GROUP_7;

 theorems TARSKI, FUNCT_1, FUNCT_2, FUNCT_4, FUNCT_7, FUNCOP_1, GROUP_2,
   GROUP_6, GROUP_7, GROUP_12, GROUP_19, PBOOLE, PARTFUN1;

 requirements BOOLE, SUBSET, NUMERALS, ARITHM, REAL;

 schemes FUNCT_2;

begin

theorem Th1:
  for I being set
  for X,Y being ManySortedSet of I
  holds (for i being Element of I holds X.i = Y.i) implies X = Y
proof
  let I be set;
  let X,Y be ManySortedSet of I;
  assume A1: for i being Element of I holds X.i = Y.i;
  per cases;
  suppose I is empty;
    hence thesis;
  end;
  suppose I is non empty;
    for i being object st i in I holds X.i = Y.i by A1;
    hence thesis by PBOOLE:3;
  end;
end;

definition
  let I be set;
  let X, Y be ManySortedSet of I;
  redefine pred X = Y means
  :Def1:
  for i being Element of I
  holds X.i = Y.i;
  compatibility by Th1;
end;

:: Universal property of terminal object for the trivial group
theorem Th2:
  for G being Group
  for H being trivial Group
  ex h being Homomorphism of G,H 
  st (for f being Homomorphism of G,H holds h=f)
proof
  let G be Group;
  let H be trivial Group;

  A1: the carrier of H = {1_H}
  proof
    H is trivial;
    then consider x being object such that
    A1: the carrier of H = {x};
    thus thesis by A1, TARSKI:def 1;
  end;
  take h = 1:(G,H);
  for f being Homomorphism of G,H holds h=f
  proof
    let f be Homomorphism of G,H;
    for g being object st g in the carrier of G holds f.g = h.g
    proof
      let g be object;
      assume B1: g in the carrier of G;
      f.g in H by B1,FUNCT_2:5;
      then f.g = 1_H by A1, TARSKI:def 1
              .= h.g by B1, FUNCOP_1:7;
      hence f.g = h.g;
    end;

    hence h=f;
  end;
  hence thesis;
end;

theorem Th3:
  for I being non empty set
  for F being Group-Family of I
  for i being Element of I
  for g being Element of product F
  holds g.i is Element of F.i
proof
  let I be non empty set;
  let F be Group-Family of I;
  let i be Element of I;
  let g be Element of product F;
  g is Function & g in product F;
  then g.i in F.i by GROUP_19:5;
  hence thesis;
end;

definition
  let I be non empty set;
  let F be Group-Family of I;
  let g be Element of product F;
  let i be Element of I;
  redefine func g.i -> Element of F.i;
  correctness by Th3;
end;

:: Existence and uniqueness of projection homomorphism
theorem Th4:
  for I being non empty set
  for F being Group-Family of I
  for i being Element of I
  ex p being Homomorphism of (product F), F.i
  st (for h being Element of product F holds p.h = h.i) &
     (for p2 being Homomorphism of (product F), F.i
      st (for h being Element of product F holds p2.h = h.i)
      holds p = p2) &
     p is onto
proof
  let I be non empty set;
  let F be Group-Family of I;
  let i be Element of I;
  deffunc F1() = product F;
  deffunc F2() = F.i;
  deffunc F3(Element of F1()) = $1.i;
  consider p being Function of F1(), F2() such that
  A1: for x being Element of F1() holds p.x = F3(x)
  from FUNCT_2:sch 4;
  reconsider p as Function of product F, F.i;

  for a, b being Element of product F
  holds p.(a * b) = (p.a) * (p.b)
  proof
    let a, b be Element of product F;
    reconsider Fi=F.i as Group;
    reconsider f = a, g = b, h = a*b as Function;
    reconsider x = a.i, y = b.i as Element of Fi;
    (p.a) * (p.b) = (p.a) * (b.i) by A1
                 .= (a.i) * (b.i) by A1
                 .= (a * b).i by GROUP_7:1
                 .= p.(a * b) by A1;
    hence p.(a * b) = (p.a) * (p.b);
  end;
  then reconsider p as Homomorphism of product F,F.i by GROUP_6:def 6;
  take p;
  thus for h being Element of product F holds p.h = h.i by A1;

  thus for p2 being Homomorphism of (product F), F.i
  st (for h being Element of product F holds p2.h = h.i)
  holds p = p2
  proof
    let p2 be Homomorphism of (product F), F.i;
    assume B1: for h being Element of product F holds p2.h = h.i;
    for x being object st x in the carrier of product F holds p.x = p2.x
    proof
      let x be object;
      assume x in the carrier of product F;
      then reconsider xx=x as Element of product F;
      p.x = xx.i by A1
         .= p2.x by B1;
      hence p.x = p2.x;
    end;
    hence p = p2;
  end;

  for y being object
  holds y in the carrier of F.i iff ex x being object st x in dom p & y = p.x
  proof
    let y be object;
    thus y in the carrier of F.i implies ex x being object st x in dom p & y = p.x
    proof 
      assume y in the carrier of F.i;
      then reconsider yy=y as Element of F.i;
      (1ProdHom (F, i)).yy in ProjGroup (F, i);
      then (1ProdHom (F, i)).yy in ProjSet (F, i) by GROUP_12:def 2;
      then consider x being Function, g being Element of F.i such that
      C1: x = (1ProdHom (F, i)).yy & dom x = I & x.i = g &
          for j being Element of I st j <> i holds x.j = 1_(F.j)
      by GROUP_12:2;

      the carrier of (product F) = product (Carrier F) by GROUP_7:def 2;
      then dom (1_(product F)) = I by PARTFUN1:def 2;
      then C2: y = ((1_(product F)) +* (i, y)).i by FUNCT_7:31
                .= x.i by C1,GROUP_12:def 3
                .= g by C1;
      C3: x in product F by C1,GROUP_2:41;
      take x;
      thus x in dom p by C3, FUNCT_2:def 1;
      thus y = p.x by A1, C1, C2, C3;
    end;
    thus (ex x being object st x in dom p & y = p.x) implies y in the carrier of F.i
    proof
      given x being object such that 
      C1: x in dom p & y = p.x;
      thus y in the carrier of F.i by C1, FUNCT_2:5;
    end;
  end;

  then rng p = the carrier of F.i by FUNCT_1:def 3;
  hence p is onto;
end;

theorem Th5:
  for I being non empty set
  for F1,F2 being Group-like associative multMagma-Family of I
  st product F1 = product F2
  for i being Element of I
  holds F1.i = F2.i
proof
  let I be non empty set;
  let F1,F2 be Group-like associative multMagma-Family of I;
  assume product F1 = product F2;
  let i be Element of I;
  thus F1.i = F2.i;
::>              *4
end;

theorem Th6:
  for I being non empty set
  for F1,F2 being Group-like associative multMagma-Family of I
  st product F1 = product F2
  holds F1 = F2 by Th5;

definition
  let I be non empty set;
  let G be Group such that
A1: ex F being Group-Family of I st G = product F;
  let i be Element of I;
  func pi (G, i) -> Group means
  :Def2:
  ex F being Group-Family of I st G = product F & it = F.i;
  existence
  proof
    consider F being Group-Family of I such that
    B1: G = product F
    by A1;
    take Gi = F.i;
    take F;
    thus thesis by B1;
  end;
  uniqueness by Th6;
end;

theorem Th7:
  for I being non empty set
  for F being Group-Family of I
  for i being Element of I
  holds pi (product F, i) = F.i by Def2;



::> 4: This inference is not accepted
