<!--- -*- mode: Markdown; var: -*- -->
# 2021-12-07T09:03:50

I am just jotting my thoughts and findings down as I go along. This file
could be viewed as a "blog" specific to this experiment.

My first milestone will be to define a "characteristic subgroup". I
never learned this as an undergraduate, and I don't recall seeing it in
graduate algebra courses. Basically: a subgroup H of G is characteristic
if H is invariant under every automorphism of G.

Thus I need a notion of automorphism of a group. This would appear to be
done in `AUTGROUP.MIZ`, but that article unwisely chose to define `Aut G` 
as the collection of bijective functions on the underlying set of G.
Instead, I want an automorphism to be a bijective group endomorphism.

Once I have this notion well-defined, I can introduce an _attribute_
`characteristic` of `Subgroup`. Then, as I understand it, I need to
register the attribute as a cluster, so I can write things like 
`let H be characteristic Subgroup of G`.

In Mizar, defining an attribute requires proving at least one object
exists with it. This is easy for a characteristic subgroup: the trivial
group is characteristic. The first few theorems are written with this in
mind. 

## Problem: `id G` cannot be obviously redefined as Homomorphism of G,G

**Problem:** I want to have `id G` be the identity group morphism
$id\colon G\to G$, but...that's hard to do? When I try `redefine func id`,
proving `coherence` is obvious to me but not to Mizar, and it's unclear
what the goal is:

```mizar
definition :: Def4
  let G;
  redefine func id G -> Homomorphism of G,G;
  coherence
  proof
  :: ???
  end;
end;
```

**Hacky Solution:** I introduced an identity morphism `Id_G`. I proved
`Id_G = id (the carrier of G)` in theorem 5. It's totally unclear to me
how to take advantage of this.

## Current Road map

**TODO List:**
- [ ] Prove `Id_G` is an Automorphism of G (Th6)
- [ ] Prove `Id_G` is an inner Automorphism of G (Th7)
- [ ] Prove normal subgroups are invariant under inner automorphisms
  - It seems like either (a) it may be useful to define a notion of
    invariance, or (b) it will be a huge detour
  - `group_5.miz` may be useful, specifically `Th3`
- [ ] Prove characteristic subgroups are normal
- [ ] Prove `center G is characteristic Subgroup of G`
  - `Th78` of `group_5.miz` proves `center G is normal Subgroup of G`
- [ ] Prove the derived subgroup ``G` `` is a characteristic Subgroup of G
  - Definition 9 of `group_5.miz` defines the derived Subgroup as the
    strict normal subgroup, the smallest one containing `[G,G]`, and
    Th72 confirms this property
  - **Caution:** the commutator is defined in the manner typical for
    finite group theory, contra its definition in Lie groups, as
    $[x,y]=x^{-1}y^{-1}xy$
  - Also note: for any subsets A,B of G, the notation is `[.A,B.]` is
    the strict Subgroup of G generated by commutators of elements
    $[a,b]$ for $a\in A$ and $b\in B$
- [ ] Define the `normal_closure` of a subset X of G
  - `gr X |^ (the carrier of G)` using `GROUP_3:def 3`
- [ ] Look into whether we can redefine `Aut G` (the set of bijective
      Homomorphisms of G,G) from `AUTGROUP:def 1` to be instead 
      `for f being Element of it holds f is Automorphism of G`

# 2021-12-07

**Observation 1.** Managing the `environ` part of the article is a nightmare. When
designing a theorem prover, it's important to make it easy for the user,
and managing the "import system" should not hinder the user.

There should be a script which let's me say, "OK, I want to refer to X
from article A", and the script will update my `environ` for me. I know
the `constr` utility, but it's still bewildering.

**Observation 2.** Having a separate `.voc` file is a nuissance. I've
frequently been bitten by forgetting to add a definition to it. A better
design would avoid such a thing if possible.

**Remark.** I recognize this design decision (having a `.voc` file) was presumably
made with the design decision of having an `environ` section in a Mizar
article. I also recognize that when the decisions were made, there were
few examples to refer to (and none of them were _good_ examples). 

But I think it might be useful to take a page from Fortran, and redesign
the Mizar language to (a) avoid the tedious aspects which are now
antiquated, and (b) be backwards compatible to avoid rewriting the MML.
(End of Remark)

----

If you are trying to use Mizar mode on Emacs, I found a fascinating bug
caused by `$MIZFILES` not expanding in Emacs correctly. The only remedy
I could contrive was to add to the file `/etc/environment` the line:

```
MIZFILES=/usr/local/share/mizar
```

After rebooting the computer, Emacs expands 
`(substitute-in-file-name "$MIZFILES")` correctly to
`/usr/local/share/mizar`. Now I can compile a Mizar file with 
`C-c Ret`. Neat!

# 2021-12-08T06:19:40

I am making good progress at defining inner automorphisms, but I hit a
cryptic snag: apparently `inner` is not recognized as an attribute. I
have no idea what could be causing the problem, my only reference for
something like this is:

- Adam Grabowski and Christoph Schwarzweller,
  "Towards Standard Environments for Formalizing Mathematics".
  [PDF](https://inf.ug.edu.pl/~schwarzw/papers/6pcm.pdf), page 7.
  
And even then, I am uncertain how to remedy my problem.

# 2021-12-09T11:38:14

The starting point for anyone interested in formalizing groups in Mizar
would be familiarizing yourself with `struct_0.miz` and possibly
`algstr_0.miz`. One confusing thing: the terminology uses antiquated
notions like "loops", etc. Apparently these terms Mizar uses, well, they
come from:

- Wanda Szmielew, _From Affine to Euclidean Geometry_

A loop is a unital magma with division. It is **not** a group, because
we do not require associativity. (The term "loop" does not seem to
appear in Bourbaki's _Algebra_, at least not the English translation.)

------

I have been mulling over the notion of "literate formal mathematics",
and I think something like `noweb` would fit the bill. I don't know if I
agree with the procedural theorem proving community that "just inserting
comments stating what the goal is at each step" qualifies...because,
well, how am I supposed to know _why_ you defined `lpStrGrMgm` to be
whatever?

In this regard, Knuth was right in arguing presenting the material twice
(once informally, the second time formally). Even with declarative proof
styles, like Mizar, I am finding myself writing notes to remind myself
_why_ a mode or functor was defined the way to it was. It would be
useful to bundle these notes together with the code, but as
comments...that isn't the correct way.

And, being a boring stick-in-the-mud myself, I prefer Knuth's WEB style
of numbered paragraphs with some English commentary in TeX, some "code
snippet" in Mizar (or Coq or whatever), and so on.

# 2021-12-09T13:49:41

Adam Grabowski kindly helped me, pointing out I needed to register
`Id_G` is bijective before I could start treating it like an
Automorphism automatically. Dr Grabowski also pointed out the command
line utility `checkvoc text/tmp` to determine if I am accidentally
defining duplicate terms (like Isomorphism or Endomorphism). I really
appreciate his help and kind feedback, it's really wonderful.